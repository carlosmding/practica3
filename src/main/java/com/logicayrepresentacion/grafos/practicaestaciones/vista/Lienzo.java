/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.logicayrepresentacion.grafos.practicaestaciones.vista;

import com.logicayrepresentacion.grafos.practicaestaciones.DatosEstacion;
import com.logicayrepresentacion.grafos.practicaestaciones.Estacion;
import java.awt.BasicStroke;
import java.awt.Color;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.geom.Ellipse2D;
import javax.swing.JOptionPane;

/**
 *
 * @author 57300
 */
public class Lienzo extends javax.swing.JPanel {

    DatosEstacion datosEstacion;
    public static final int DIAMETRO = 30;
    Estacion estacionSeleccionada;

    public void setObjArbol(DatosEstacion datosEstacion) {
        this.datosEstacion = datosEstacion;
        repaint();
    }

    @Override
    public void paint(Graphics g) {
        super.paint(g); //To change body of generated methods, choose Tools | Templates.

        Graphics2D g2 = (Graphics2D) g;
        g2.setStroke(new BasicStroke(2));

        if (datosEstacion != null) {
            for (Estacion esta : datosEstacion.getEstaciones()) {
                Ellipse2D elipse = esta.getForma();
                if (elipse == null) {
                    elipse = new Ellipse2D.Double(30, 30,
                            DIAMETRO + 50,
                            DIAMETRO);
                    esta.setForma(elipse);
                }
                g2.draw(elipse);
            }
        }

        int[][] matrizAdy = datosEstacion.getGrafo().getMatrizAdy();
        int[][] matrizCostos = datosEstacion.getGrafo().getMatrizCostos();
        for (int i = 0; i < matrizAdy.length; i++) {
            for (int j = 0; j < matrizAdy.length; j++) {
                int ady = matrizAdy[i][j];
                if (ady != 0) {
                    Estacion estacion1 = datosEstacion.getEstaciones()[i];
                    Estacion estacion2 = datosEstacion.getEstaciones()[j];
                    double x1 = estacion1.getForma().getCenterX();
                    double y1 = estacion1.getForma().getCenterY();
                    double x2 = estacion2.getForma().getCenterX();
                    double y2 = estacion2.getForma().getCenterY();
                    g2.drawLine((int) x1, (int) y1, (int) x2, (int) y2);
                    String costo = String.valueOf(matrizCostos[i][j]);
                    int xmed, ymed;
                    xmed = ((int) x1 + (int) x2)/2;
                    ymed = ((int) y1 + (int) y2)/2;
                    g2.drawString(costo,xmed -10 ,ymed-20);
                    g2.drawString(estacion1.getNombre(), (int) x1 - 20, (int) y1 - 20);

                }
            }

        }
    }

    public void pintarRuta(Graphics g, int[][] lados) {
        int inicio, fin;
        for (int[] lado : lados) {
            inicio = lado[0];
            fin = lado[1];
            Estacion estacion1 = datosEstacion.getEstaciones()[inicio];
            Estacion estacion2 = datosEstacion.getEstaciones()[fin];
            double x1 = estacion1.getForma().getCenterX();
            double y1 = estacion1.getForma().getCenterY();
            double x2 = estacion2.getForma().getCenterX();
            double y2 = estacion2.getForma().getCenterY();
            g.setColor(Color.red);
            g.drawLine((int) x1, (int) y1, (int) x2, (int) y2);
        }
    }

    public void pintarArista(Graphics g, int vi, int vf) {
        Estacion estacion1 = datosEstacion.getEstaciones()[vi];
        Estacion estacion2 = datosEstacion.getEstaciones()[vf];
        double x1 = estacion1.getForma().getCenterX();
        double y1 = estacion1.getForma().getCenterY();
        double x2 = estacion2.getForma().getCenterX();
        double y2 = estacion2.getForma().getCenterY();
        g.setColor(Color.red);
        g.drawLine((int) x1, (int) y1, (int) x2, (int) y2);
    }

    /**
     * Creates new form NewJPanel
     */
    public Lienzo() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setBorder(javax.swing.BorderFactory.createTitledBorder("Grafo"));
        setAutoscrolls(true);
        setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                formMouseDragged(evt);
            }
        });
        addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                formMouseClicked(evt);
            }
            public void mousePressed(java.awt.event.MouseEvent evt) {
                formMousePressed(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                formMouseReleased(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 388, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 277, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    private void formMouseDragged(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMouseDragged
        System.out.println("Me hicieron formMouseDragged en " + evt.getX() + " " + evt.getY());
        if (estacionSeleccionada != null) {
            Ellipse2D elipse = new Ellipse2D.Double(evt.getX(), evt.getY(),
                    DIAMETRO + 50,
                    DIAMETRO);
            estacionSeleccionada.setForma(elipse);
        }
        repaint();
    }//GEN-LAST:event_formMouseDragged

    private void formMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMousePressed
        System.out.println("Me hicieron formMousePressed en " + evt.getX() + " " + evt.getY());
        for (Estacion estacion : datosEstacion.getEstaciones()) {
            Ellipse2D figura = estacion.getForma();
            System.out.println("evaluando " + figura);
            if (figura.contains(evt.getX(), evt.getY())) {
                System.out.println("Me hicieron formMousePressed en " + estacion.getNombre());
                Graphics2D g2 = (Graphics2D) this.getGraphics();
                g2.setPaint(Color.red);
                g2.fill(figura);
                estacionSeleccionada = estacion;
                break;
            }
        }
    }//GEN-LAST:event_formMousePressed

    private void formMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMouseClicked
        System.out.println("Me hicieron click en " + evt.getX() + " " + evt.getY());


    }//GEN-LAST:event_formMouseClicked

    private void formMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMouseReleased
        System.out.println("Me hicieron formMouseReleased en " + evt.getX() + " " + evt.getY());
        estacionSeleccionada = null;
    }//GEN-LAST:event_formMouseReleased


    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
